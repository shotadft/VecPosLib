from typing import TypeVar, Generic, Union, List, Tuple

Number = Union[float, int]
T = TypeVar('T', bound=Number)

class Position(Generic[T]):
    def __init__(self, *args: T) -> None: ...
    @property
    def x(self) -> Number: ...
    @property
    def y(self) -> Number: ...
    @property
    def z(self) -> Number: ...
    @property
    def w(self) -> Number: ...
    @property
    def ndim(self) -> int: ...
    def to_list(self) -> List[Number]: ...
    def to_tuple(self) -> Tuple[Number, ...]: ...
    def is_zero(self) -> bool: ...
    def normalize(self) -> 'Position[float]': ...
    def __repr__(self) -> str: ...
