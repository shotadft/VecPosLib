from typing import TypeVar, Generic, Union, List, Tuple, Literal, Iterator

Number = Union[float, int]
T = TypeVar("T", bound=Number)

class Position(Generic[T]):
    def __init__(self, *args: T) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[T]: ...
    def __getitem__(self, key: Union[int, Literal["x", "y", "z", "w"]]) -> T: ...
    @property
    def x(self) -> T: ...
    @property
    def y(self) -> T: ...
    @property
    def z(self) -> T: ...
    @property
    def w(self) -> T: ...
    @property
    def ndim(self) -> int: ...
    def to_list(self) -> List[T]: ...
    def to_tuple(self) -> Tuple[T, ...]: ...
    def is_zero(self) -> bool: ...
    def normalize(self) -> "Position[float]": ...
    def __repr__(self) -> str: ...
