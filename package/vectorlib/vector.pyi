from typing import TypeVar, Generic, Union, List, Tuple, Sequence

Number = Union[float, int]
T = TypeVar('T', bound=Number)

class Vector(Generic[T]):
    def __init__(self, data: Sequence[T]) -> None: ...
    @property
    def ndim(self) -> int: ...
    def to_list(self) -> List[Number]: ...
    def to_tuple(self) -> Tuple[Number, ...]: ...
    def norm(self) -> float: ...
    def normalize(self) -> 'Vector[float]': ...
    def dot(self, other: 'Vector[T]') -> float: ...
    def __add__(self, other: 'Vector[T]') -> 'Vector[T]': ...
    def __sub__(self, other: 'Vector[T]') -> 'Vector[T]': ...
    def __repr__(self) -> str: ...
    def __getitem__(self, idx: int) -> Number: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __mul__(self, scalar: Number) -> 'Vector[float]': ...
    def __rmul__(self, scalar: Number) -> 'Vector[float]': ...
