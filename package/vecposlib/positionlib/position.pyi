from typing import Generic, List, Tuple, Iterator, Union
from ..common import T, CoordinateName, ArrayType, VectorDimension

class Position(Generic[T]):
    def __init__(self, *args: T) -> None: ...
    @property
    def ndim(self) -> int: ...
    @property
    def dimension(self) -> VectorDimension: ...
    @property
    def x(self) -> T: ...
    @property
    def y(self) -> T: ...
    @property
    def z(self) -> T: ...
    @property
    def w(self) -> T: ...
    def _target_type(self): ...
    def _cast(self, v): ...
    def _cast_coords(self, coords: ArrayType) -> List[T]: ...
    def _validate_index(self, idx: int): ...
    def _get_coord(self, index: int) -> T: ...
    def to_list(self) -> List[T]: ...
    def to_tuple(self) -> Tuple[T, ...]: ...
    def normalize(self) -> "Position[float]": ...
    def __setattr__(self, name: str, value: object) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[T]: ...
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, key: Union[int, CoordinateName]) -> T: ...
    def is_zero(self) -> bool: ...
    def __repr__(self) -> str: ...
